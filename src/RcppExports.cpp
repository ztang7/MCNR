// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <FLasher.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// MH_cal
Eigen::MatrixXd MH_cal(NumericVector theta0, NumericVector x0, NumericMatrix y0, NumericMatrix z0, NumericVector alpha0, NumericMatrix err0, NumericMatrix ind);
RcppExport SEXP _MCNR_MH_cal(SEXP theta0SEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP z0SEXP, SEXP alpha0SEXP, SEXP err0SEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type err0(err0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(MH_cal(theta0, x0, y0, z0, alpha0, err0, ind));
    return rcpp_result_gen;
END_RCPP
}
// MH_update
Eigen::MatrixXd MH_update(NumericVector x0, int n);
RcppExport SEXP _MCNR_MH_update(SEXP x0SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(MH_update(x0, n));
    return rcpp_result_gen;
END_RCPP
}
// phi_deriv
List phi_deriv(std::vector<double> phi0, NumericMatrix z0, NumericVector alphaz0);
RcppExport SEXP _MCNR_phi_deriv(SEXP phi0SEXP, SEXP z0SEXP, SEXP alphaz0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type phi0(phi0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphaz0(alphaz0SEXP);
    rcpp_result_gen = Rcpp::wrap(phi_deriv(phi0, z0, alphaz0));
    return rcpp_result_gen;
END_RCPP
}
// theta_deriv
List theta_deriv(std::vector<double> theta0, NumericVector x0, NumericVector alphaz0, NumericVector y0, std::vector<int> complete_pos);
RcppExport SEXP _MCNR_theta_deriv(SEXP theta0SEXP, SEXP x0SEXP, SEXP alphaz0SEXP, SEXP y0SEXP, SEXP complete_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphaz0(alphaz0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type complete_pos(complete_posSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_deriv(theta0, x0, alphaz0, y0, complete_pos));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MCNR_MH_cal", (DL_FUNC) &_MCNR_MH_cal, 7},
    {"_MCNR_MH_update", (DL_FUNC) &_MCNR_MH_update, 2},
    {"_MCNR_phi_deriv", (DL_FUNC) &_MCNR_phi_deriv, 3},
    {"_MCNR_theta_deriv", (DL_FUNC) &_MCNR_theta_deriv, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MCNR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
